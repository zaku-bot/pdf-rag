import torch
from transformers import CLIPProcessor, CLIPModel
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from json_vectorization.clip_vectorization import vectorize_text
import numpy as np
import time

# Initialize the CLIP model and processor
clip_model = CLIPModel.from_pretrained("openai/clip-vit-base-patch32")
clip_processor = CLIPProcessor.from_pretrained("openai/clip-vit-base-patch32")

def cosine_similarity(vec1, vec2):
    """
    Calculates cosine similarity between two vectors.

    Args:
        vec1 (list): First vector.
        vec2 (list): Second vector.

    Returns:
        float: Cosine similarity score.
    """
    vec1 = np.array(vec1)
    vec2 = np.array(vec2)
    return np.dot(vec1, vec2) / (np.linalg.norm(vec1) * np.linalg.norm(vec2))

# Test case for vectorize_text
def test_vectorize_text():
    """
    Test the vectorize_text function to verify its correctness.
    """
    sample_input = (
        "A data warehouse efficiently prepares data for effective and fast data analysis and modelling using machine learning algorithms. This paper discusses existing solutions for the Data Extraction, Transformation, and Loading (ETL) process and automation for algorithmic trading algorithms. Integrating the Data Warehouses and, in the future, the Data Lakes with the Machine Learning Algorithms gives enormous opportunities in research when performance and data processing time become critical non-functional requirements."
    )
    expected_embedding = [
      0.18012607097625732, 0.08158685266971588, 0.1311657726764679,
      -0.002100279787555337, 0.1929841935634613, 0.06816145032644272,
      -0.3468165695667267, 0.8287806510925293, 1.0193504095077515,
      -0.07250212132930756, -0.35179150104522705, 0.32714200019836426,
      0.44572317600250244, 0.07625214755535126, 0.1748320758342743,
      0.2222011536359787, 0.08178745210170746, 0.37553438544273376,
      0.19060537219047546, 0.2272847592830658, 0.003847673302516341,
      0.12437568604946136, -0.39811769127845764, 0.8207353949546814,
      0.0781433954834938, 0.35506290197372437, 0.06499455124139786,
      -0.1863860934972763, 0.1018291562795639, -0.532073438167572,
      -0.21269577741622925, 0.06957302242517471, -0.18533295392990112,
      0.26774775981903076, 0.049460139125585556, -0.2199457287788391,
      -0.39106565713882446, 0.17521876096725464, 0.12397605925798416,
      -0.4450467824935913, -0.14931148290634155, -0.032965898513793945,
      -0.02457904815673828, -0.15223242342472076, -0.08346675336360931,
      -0.08967676758766174, 0.3672877252101898, -0.28923794627189636,
      -0.34152817726135254, 0.1587965488433838, -0.3594687283039093,
      0.20403258502483368, -0.290490061044693, 0.3117150068283081,
      -0.3318069875240326, -0.22488075494766235, -0.332996129989624,
      -0.33918553590774536, 0.24090096354484558, -0.11583428084850311,
      0.061608560383319855, -0.1225011870265007, -0.0486096553504467,
      0.15835078060626984, -0.3965590000152588, 0.05808858200907707,
      -0.2416352480649948, 0.229948490858078, -0.38789620995521545,
      -0.36439892649650574, -0.10913776606321335, 0.4306015968322754,
      0.06958719342947006, -0.3093927204608917, -0.38293832540512085,
      0.36679312586784363, -0.2549345791339874, -0.6269729137420654,
      -0.1592508852481842, 0.34894365072250366, -0.00204099016264081,
      0.3143533766269684, -0.12636710703372955, 0.3610646724700928,
      0.23659901320934296, -0.044623807072639465, 0.6189023852348328,
      0.15774615108966827, 0.24958178400993347, 0.18173947930335999,
      -0.32142043113708496, -0.0227346308529377, -0.5247923135757446,
      0.10748179256916046, -0.2647838890552521, -0.4129784405231476,
      0.326162725687027, 0.09577031433582306, 0.015568597242236137,
      -0.369418203830719, 0.18667292594909668, -0.08270610123872757,
      -0.17575938999652863, -0.21930991113185883, 0.10489005595445633,
      0.1085570678114891, -0.6759198904037476, 0.22160014510154724,
      -0.15587645769119263, -0.3881244659423828, 0.4923456013202667,
      -1.036183476448059, 0.2827620208263397, -0.09005866199731827,
      -0.24489325284957886, -0.33561497926712036, -0.06234174594283104,
      -0.084920734167099, -0.0231651421636343, 0.38209640979766846,
      0.28431805968284607, 0.49104830622673035, 0.023566169664263725,
      -0.07701873034238815, 0.32446837425231934, 0.11126016825437546,
      -0.15497608482837677, 0.3996126651763916, 0.08486978709697723,
      0.05818130075931549, 0.24992677569389343, -0.12896978855133057,
      0.030494706705212593, 4.2936553955078125, -0.5118387341499329,
      0.1148432269692421, -0.24307435750961304, -0.5124002695083618,
      -0.490250825881958, 0.42056846618652344, -0.17666161060333252,
      -0.22664713859558105, -0.3122781217098236, -0.30343765020370483,
      -0.0058365934528410435, -0.016786137595772743, -0.02350730076432228,
      0.14140908420085907, -0.2233118712902069, 0.4005066156387329,
      0.29693129658699036, -0.02404201775789261, 0.27564048767089844,
      0.8541898131370544, 0.06323171406984329, -0.4230651557445526,
      0.12827621400356293, -0.14809127151966095, 0.42425331473350525,
      -0.08717911690473557, -0.06219721958041191, -0.052749257534742355,
      0.1806510090827942, -0.15811362862586975, 0.26135537028312683,
      0.2103705257177353, 0.032782599329948425, 0.31596502661705017,
      -0.11797820031642914, -0.14099818468093872, -0.2925533354282379,
      0.18489699065685272, 0.19674594700336456, -0.32527628540992737,
      0.2597713768482208, -0.014508737251162529, -0.0007055566529743373,
      -0.17004521191120148, 0.2945561408996582, 0.30000194907188416,
      -0.24826829135417938, -0.05713357403874397, -0.418996661901474,
      0.14471711218357086, 0.24705548584461212, -0.20116500556468964,
      0.016457589343190193, 0.3832501471042633, -0.025244662538170815,
      0.26133519411087036, 0.28619998693466187, -0.0723171979188919,
      -0.11743537336587906, 0.3204773962497711, 0.43980056047439575,
      0.2929868996143341, 0.32244980335235596, 0.48273736238479614,
      0.3553891181945801, -0.031288083642721176, -0.15872731804847717,
      0.11639881134033203, 0.14155162870883942, 0.19308292865753174,
      -0.045458827167749405, -0.3054182827472687, -0.20985376834869385,
      0.12913702428340912, 0.07763589173555374, 0.011591820977628231,
      -0.29367634654045105, -0.23190829157829285, -0.08202803879976273,
      -0.2250239998102188, -0.20187319815158844, -0.06125391647219658,
      0.23710118234157562, 0.13414491713047028, 0.035886410623788834,
      0.1560804694890976, 0.7697386741638184, -0.05781044811010361,
      0.32949745655059814, 0.08138656616210938, 0.44355860352516174,
      0.11349882185459137, 0.36861544847488403, -0.03345794975757599,
      0.09329462051391602, -0.05410575121641159, -0.0650719478726387,
      -0.14761734008789062, 0.07146844267845154, 0.2444809377193451,
      -0.05532493442296982, -0.13849735260009766, -0.1657686084508896,
      0.1416686624288559, 0.11027070879936218, -0.008300567045807838,
      -0.1139577329158783, 0.1286797672510147, -0.11327396333217621,
      0.14915969967842102, 0.20320558547973633, 0.45175009965896606,
      0.0682043507695198, -0.07670906186103821, 0.23558883368968964,
      0.4224412143230438, -0.08597071468830109, -0.13058237731456757,
      0.11105569452047348, 0.19300469756126404, 0.15620633959770203,
      0.261373370885849, -0.11104880273342133, 0.23606042563915253,
      -0.008967787958681583, 0.07749664038419724, 0.016814596951007843,
      -0.0984514057636261, -0.11482074111700058, 0.2667875587940216,
      -0.36502572894096375, -0.2893437147140503, -0.1903514862060547,
      0.22304625809192657, 0.24533727765083313, 0.08279541879892349,
      -0.11077510565519333, 0.13311168551445007, -0.18417306244373322,
      0.15678085386753082, -0.08109860867261887, -0.048331767320632935,
      -0.2625984251499176, -0.2568167448043823, -0.23617713153362274,
      -0.02332986518740654, -0.3440939784049988, -0.040831539779901505,
      -0.07459447532892227, -0.3755057156085968, 0.2598273754119873,
      0.2803712487220764, 0.12544147670269012, 0.10631385445594788,
      0.07372249662876129, 0.1558247059583664, -0.3713778555393219,
      0.07231204956769943, 0.1440792828798294, 0.13466432690620422,
      -0.0668613389134407, 0.22151608765125275, -0.09940829873085022,
      -0.36444398760795593, 0.22367461025714874, -0.052206020802259445,
      -0.40188533067703247, -0.0760430321097374, -0.29589948058128357,
      0.27696964144706726, -0.022670544683933258, 0.06285735219717026,
      0.38921940326690674, 0.28490397334098816, -0.06297606229782104,
      -0.0740092322230339, -0.31489428877830505, 0.071261465549469,
      4.306673526763916, 0.018737465143203735, -0.28208276629447937,
      -0.037513695657253265, 0.09022215008735657, -0.43681249022483826,
      -0.018788689747452736, -0.5110040903091431, 0.15626630187034607,
      0.12312001734972, -0.3198205232620239, -0.155757337808609,
      -0.36212122440338135, 0.09082502126693726, -0.18453443050384521,
      -0.17475289106369019, -0.34626254439353943, -0.15860772132873535,
      -0.11022895574569702, 0.04649895802140236, -0.24794602394104004,
      -0.0747445747256279, 0.17878499627113342, 0.22694694995880127,
      -0.34200817346572876, 0.15438233315944672, -0.5924426317214966,
      0.059593696147203445, 0.26942893862724304, -0.2612569332122803,
      -0.15499071776866913, -0.340192586183548, 0.37439486384391785,
      -0.3809814155101776, 0.514355480670929, -0.3658072352409363,
      -0.08331390470266342, -0.26788318157196045, 0.3105948269367218,
      -0.10349803417921066, 0.3042956292629242, -0.29314759373664856,
      -0.26664024591445923, -0.4132170081138611, 0.09998871386051178,
      -0.17836205661296844, 0.15083782374858856, -0.0492982491850853,
      0.1528436541557312, -0.10369192808866501, 0.05918530002236366,
      -0.051219284534454346, -0.5801441669464111, -0.33601441979408264,
      0.1958996057510376, 0.03468719497323036, -0.26927444338798523,
      -0.024588419124484062, 0.2002214938402176, -0.06959996372461319,
      0.2248782217502594, -0.040572069585323334, 0.11402957886457443,
      0.2560131847858429, -0.05338955670595169, -0.4618457555770874,
      0.6199897527694702, -0.5539183616638184, -0.05376578867435455,
      -0.27787962555885315, 0.05997096747159958, -0.23742716014385223,
      -0.3748563826084137, 0.8784937858581543, 0.2861455976963043,
      0.05982594937086105, -0.3023640811443329, 0.2702352702617645,
      0.06933418661355972, 0.20869404077529907, 0.21861837804317474,
      0.1611175835132599, 0.46105629205703735, 0.1907392293214798,
      -0.40933266282081604, 0.11402525752782822, -0.17388416826725006,
      0.5332567691802979, -0.026012999936938286, -0.12270225584506989,
      -0.0030561774037778378, 0.056005656719207764, 0.2839094400405884,
      -0.2533406913280487, -0.4711732268333435, 0.07807639986276627,
      -0.28290995955467224, -0.41896647214889526, -0.25545641779899597,
      -0.014211850240826607, 0.20531806349754333, -0.14845073223114014,
      0.03279516473412514, -0.7063103318214417, 0.28383901715278625,
      -0.27037349343299866, -0.3479969799518585, -0.21068191528320312,
      -0.269851952791214, -0.062320973724126816, -0.19234003126621246,
      -0.3536664545536041, 0.24727484583854675, -0.29463309049606323,
      -0.026700885966420174, -0.0051055713556706905, -0.24771368503570557,
      -0.13520388305187225, 0.33534371852874756, 0.1552181988954544,
      -0.023608893156051636, 0.3105578124523163, -0.11764415353536606,
      0.1709158569574356, -0.07296290993690491, -0.2234075367450714,
      -0.04103497043251991, -0.2965579032897949, -0.21091020107269287,
      -0.23515458405017853, 0.4545435607433319, 0.15113671123981476,
      -0.16364210844039917, -0.02232936955988407, 0.14753791689872742,
      -0.05992204695940018, 0.06505429744720459, -0.10825791209936142,
      -0.22776110470294952, -0.05607962608337402, -0.2218555510044098,
      -0.11988046765327454, 0.1386934369802475, -0.5007016062736511,
      -0.5075578093528748, 0.5621752142906189, 0.37763428688049316,
      0.6959547996520996, 0.06198697164654732, 0.043366871774196625,
      0.22233366966247559, -0.5834136009216309, 0.32306599617004395,
      -0.06793137639760971, -0.13793154060840607, 0.2765148878097534,
      -0.06719887256622314, -0.15190017223358154, 0.029185814782977104,
      -0.21819180250167847, -0.0651870146393776, 0.05262495204806328,
      -0.11146539449691772, -0.07698549330234528, -0.1399168223142624,
      -0.010178078897297382, 0.20530277490615845, -0.03899027034640312,
      0.10256525129079819, -0.9459837079048157, 0.1567716747522354,
      0.26837804913520813, 0.2152871936559677, 0.2135387659072876,
      -0.12279292941093445, -0.0007513727177865803, -0.10256533324718475,
      -0.11167246103286743, 0.5132746696472168, -0.5156527161598206,
      0.008611725643277168, 0.08293669670820236, -0.03349271044135094,
      0.2681102752685547, 0.16964034736156464, -0.0764189213514328,
      0.057113613933324814, -0.34515634179115295, -0.1774042844772339,
      -0.3249715566635132, -0.2253810167312622, 0.308390736579895,
      0.7104708552360535, 0.003401220077648759, -0.11280405521392822,
      0.14582310616970062, -0.2795257568359375, 0.14449335634708405,
      -0.2535071074962616, 0.07603646069765091
    ] # Replace with the precomputed embedding for this input.
    embedding = vectorize_text(sample_input)

    # Check the embedding length (CLIP produces 512-dimensional embeddings)
    assert embedding is not None, "Embedding is None. Check function implementation."
    assert len(embedding) == 512, "Embedding length mismatch. Expected 512 dimensions."

    # Check if the generated embedding is similar to the expected embedding
    similarity_score = cosine_similarity(embedding, expected_embedding)
    assert similarity_score > 0.99, f"Embedding does not match expected values. Cosine similarity: {similarity_score}"

    print("Test passed: The embedding has the correct dimensions and matches the expected vector.")

# Selenium-based UI test
def test_ui():
    """
    Test a simple UI flow using Selenium.
    """
    # Initialize WebDriver
    driver = webdriver.Chrome()  # Make sure the ChromeDriver is installed and in PATH
    try:
        # Navigate to a sample page (replace with your actual page URL)
        driver.get("http://127.0.0.1:8000/")

        # Interact with elements (replace with actual element IDs, classes, or XPath as needed)
        search_box = driver.find_element(By.NAME, "q")  # Example for Google's search box
        search_box.send_keys("Test search")
        search_box.send_keys(Keys.RETURN)
        time.sleep(2)  # Wait for results

        # Validate that results are displayed
        results = driver.find_elements(By.CSS_SELECTOR, ".result")  # Example selector
        assert len(results) > 0, "No search results found. Test failed."

        print("UI test passed: Search functionality works as expected.")
    except Exception as e:
        print(f"UI test failed: {e}")
    finally:
        driver.quit()

# Run all tests when the file is executed
if __name__ == "__main__":
    print("Running vectorize_text test...")
    test_vectorize_text()
    
    print("\nRunning UI test...")
    test_ui()
